交换 两数组元素
#include  <stdio.h>
#define N 10
void ReadData(int a[], int n);
void PrintData(int a[], int n);
void Swap(int *x, int *y,int n);
int main()
{
    int  a[N], b[N], i, n;
    printf("Input array size(n<=10):");
    scanf("%d", &n);
    printf("Input array a:");
    ReadData(a, n);
    printf("Input array b:");
    ReadData(b, n);
    Swap(a,b,n);
    printf("Output array a:");
    PrintData(a, n);
    printf("Output array b:");
    PrintData(b, n);
    return 0;
}
void ReadData(int a[], int n)
{
    int i;
    for (i = 0; i < n; i++)
    {
        scanf("%d", &a[i]);
    }
}
void PrintData(int a[], int n)
{
    int i;
    for (i = 0; i < n; i++)
    {
        printf("%5d", a[i]);
    }
    printf("\n");
}
/* 函数功能：两整数值互换 */
void  Swap(int *x, int *y,int n)
{
    int  temp,i;
    for (i=0;i<n;i++)
    {
        temp=*(x+i);
    *(x+i)=*(y+i);
    *(y+i)=temp;
    }
}
二维数组与指针
#include <stdio.h>
#define M 3
#define N 4
void Input(int (*p)[4], int m, int n);
int FindMax(int (*p)[4], int m, int n, int *pRow, int *pCol);
int main()
{
    int score[M][N], maxScore, row, col;
    printf("Please input your data:\n");
    Input(score, M, N);
    maxScore = FindMax(score, M, N, &row, &col);
    printf("The maximum is %d, which is in row %d, colum %d\n", maxScore, row, col);
}
void Input(int (*p)[4], int m, int n)
{
    int i, j;
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
            scanf("%d", (p[i] + j));
    }
}
int FindMax( int (*p)[4], int m, int n, int *pRow, int *pCol )
{
    int  i, j, max;
    max = *(p[0]);
    *pRow = 0;
    *pCol = 0;
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            if ( *(p[i] + j) > max )
            {
                max = *(p[i] + j) ;
                *pRow = i;
                *pCol = j;
            }
        }
    }
    return max;
}
回文
#include <stdio.h>
#include<string.h>
void  hw (char a[],int n,int *flag);
int  main()
{
    char a[100];
    printf("Input a string:\n");
    gets(a);
    int n=strlen(a),flag=999;
    hw (a,n,&flag);
    if (flag==1)
        printf("This string is a plalindrome." );
    else
        printf("This string is not a plalindrome.");
}
void  hw (char a[],int n,int *flag)
{
    int i,t;
    char b[100];
    strcpy(b,a);
    for (i=0;i<n/2;i++)
    {
        t=a[i];
        a[i]=a[n-1-i];
        a[n-i-1]=t;
    }
    if (strcmp(a,b)==0)
        *flag =1;
    else
        *flag =0;
}
#include <stdio.h>
#include <ctype.h>
#define N 100
int IsNumIn(char word[]);
int IsSpcIn(char word[]);
void Trim(char oldWord[], char newWord[]);
void Seg(char words[], char wArray[][100] );

int main()
{
    char str1[N],str[N],w_Arr[20][100];
    int i,j;
    for(i=0;i<N;i++)
    {
        *(str1+i)=0;
        *(str+i)=0;
    }
    for(i=0;i<20;i++)
    {
        for(j=0;j<100;j++)
        w_Arr[i][j]=0;
    }
    gets(str1);
    Trim(str1,str);
    if(IsNumIn(str))
    printf("error");
    else
    {
        if(IsSpcIn(str))
        {
            Seg(str,w_Arr);
            for(i=0;w_Arr[i][0]!='\0';i++)
            {
                puts(w_Arr[i]);
            }
        }
        else
        puts(str);
    }
    return 0;
}

int IsNumIn(char word[])
{
    int i;
    for(i=0;*(word+i)!='\0';i++)
    {
        if(isdigit(*(word+i)))
        return 1;
    }
    return 0;
}

int IsSpcIn(char word[])
{
    int i;
    for(i=0;*(word+i)!='\0';i++)
    {
        if(isspace(*(word+i)))
        return 1;
    }
    return 0;
}

void Trim(char oldWord[], char newWord[])
{
    int i=0,j=0;
    while(isspace(*(oldWord+i)))
    i++;
    while( *(oldWord+i) != '\0')
    {
        *(newWord+j)=*(oldWord+i);
        i++;
        j++;
    }
    i--;
    j--;
    for(;isspace(*(oldWord+i));i--,j--)
    {
        *(newWord+j)=0;
    }
}

void Seg(char words[], char wArray[][100] )
{
    int i,j=0,k=0;
    for(i=0;i<N;i++)
    {
        if(isalpha(*(words+i)))
        {
            wArray[j][k]=*(words+i);
            k++;
        }
        else
        {
            j++;
            k=0;
        }
    }
}